/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF, Bounds, useBounds } from '@react-three/drei'
import * as THREE from "three"
import { BoxGeometry } from 'three';



export default function LegoModel({ ...props }) {


  const group = useRef()

  const { FachData, ZwillingData, AnwendungData, AnalyseData, GeobasisData } = require("./BuildingData")

  const [hoveredGround, hoverGround] = useState(false)
  const [hoveredFirst, hoverFirst] = useState(false)
  const [hoveredSecond, hoverSecond] = useState(false)
  const [hoveredThird, hoverThird] = useState(false)
  const [hoveredFourth, hoverFourth] = useState(false)

  const { nodes, materials } = useGLTF('/models/cut_model.gltf')
  //const { nodes, materials } = useGLTF('/models/legomodel.gltf')

  const color_ground = new THREE.MeshPhysicalMaterial({ color: "#14c000" })
  const color_ground_hov = new THREE.MeshPhysicalMaterial({ color: "#17df00" })
  const color_first = new THREE.MeshPhysicalMaterial({ color: "#884887" })
  const color_first_hov = new THREE.MeshPhysicalMaterial({ color: "#cb6fca" })
  const color_second = new THREE.MeshPhysicalMaterial({ color: "#ddaa3d" })
  const color_second_hov = new THREE.MeshPhysicalMaterial({ color: "#fbc759" })
  const color_third = new THREE.MeshPhysicalMaterial({ color: "#354ca7" })
  const color_third_hov = new THREE.MeshPhysicalMaterial({ color: "#5872dc" })
  const color_fourth= new THREE.MeshPhysicalMaterial({ color: "#9c3131" })
  const color_fourth_hov = new THREE.MeshPhysicalMaterial({ color: "#db5c5c" })



  //Dialogue management
  function handleClickOpen(data) {
    props.onHandleDialog(true, data);
  };

  function shadowActive() {
    if (props.activeSimulation === "shadow") {
      return true
    } else {
      return false
    }
  }

  function windDirection() {
    let direction = (-props.windDirection / 360 * 6.3 - Math.PI / 4)
    return direction
  }

  const flag_x = 0
  const flag_y = 0

  function SelectToZoom({ children }) {
    const api = useBounds()
    return (
      <group onClick={(e) => (e.stopPropagation(), e.delta <= 2 && api.refresh(e.object).fit())} onPointerMissed={(e) => e.button === 0 && api.refresh().fit()}>
        {children}
      </group>
    )
  }

  return (
    <group ref={group} {...props} dispose={null} >
      <group position={[0, 50, 0]} rotation={[0, 5, 0]}>
      <mesh geometry={nodes.ground_floor.geometry} material={hoveredGround ? color_ground_hov : color_ground} position={[0, 50, 0]} rotation={[0, 0, 0]} scale={[10,10,10]} onPointerOver={(event) => props.activeSimulation == null  && props.view.name !== "pedestrian"&& hoverGround(true)} onPointerOut={(event) => hoverGround(false)} onClick={(event) => handleClickOpen(GeobasisData)}/>
      <mesh geometry={nodes.first_floor.geometry} material={hoveredFirst ? color_first_hov : color_first} position={[0, 80, 30]} rotation={[0, 0, 0]} scale={[10 ,5,20]}  onPointerOver={(event) => props.activeSimulation == null  && props.view.name !== "pedestrian"&& hoverFirst(true)} onPointerOut={(event) => hoverFirst(false)} onClick={(event) => handleClickOpen(FachData)}/>
      <mesh geometry={nodes.second_floor.geometry} material={hoveredSecond ? color_second_hov : color_second} position={[0, 90, 40]} rotation={[0, 0, 0]} scale={[10 ,5,10]}  onPointerOver={(event) => props.activeSimulation == null  && props.view.name !== "pedestrian"&& hoverSecond(true)} onPointerOut={(event) => hoverSecond(false)} onClick={(event) => handleClickOpen(AnalyseData)}/>
      <mesh geometry={nodes.third_floor.geometry} material={hoveredThird ? color_third_hov : color_third} position={[43, 100, 40]} rotation={[0, 0, 0]} scale={[10 ,5,10]}  onPointerOver={(event) => props.activeSimulation == null  && props.view.name !== "pedestrian"&& hoverThird(true)} onPointerOut={(event) => hoverThird(false)} onClick={(event) => handleClickOpen(AnwendungData)}/>
      <mesh geometry={nodes.fourth_floor.geometry} material={hoveredFourth ? color_fourth_hov : color_fourth} position={[0, 125, 40]} rotation={[0, 0, 0]} scale={[10 ,10,10]}  onPointerOver={(event) => props.activeSimulation == null  && props.view.name !== "pedestrian"&& hoverFourth(true)} onPointerOut={(event) => hoverFourth(false)} onClick={(event) => handleClickOpen(ZwillingData)}/>
      </group>
    </group>

  )
}

useGLTF.preload('/models/cut_model.gltf')

