/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF, Bounds, useBounds } from '@react-three/drei'
import * as THREE from "three"
import { BoxGeometry } from 'three';
import { RoundedBox } from "@react-three/drei"


export default function LegoModel({ ...props }) {


  const group = useRef()

  const { FachData, ZwillingData, AnwendungData, AnalyseData, GeobasisData } = require("./BuildingData")
  const { streetData, greenAreaData, institutionData, residentialData, officeData, waterData, bridgeData } = require("./BuildingData")
  const [hoveredGround, hoverGround] = useState(false)
  const [hoveredFirst, hoverFirst] = useState(false)
  const [hoveredSecond, hoverSecond] = useState(false)
  const [hoveredThird, hoverThird] = useState(false)
  const [hoveredFourth, hoverFourth] = useState(false)

  const { nodes, materials } = useGLTF('/models/cut_model.gltf')
  //const { nodes, materials } = useGLTF('/models/legomodel.gltf')

  const color_ground = new THREE.MeshPhysicalMaterial({ color: "#14c000" })
  const color_ground_hov = new THREE.MeshPhysicalMaterial({ color: "#17df00" })
  const color_first = new THREE.MeshPhysicalMaterial({ color: "#884887" })
  const color_first_hov = new THREE.MeshPhysicalMaterial({ color: "#cb6fca" })
  const color_second = new THREE.MeshPhysicalMaterial({ color: "#ddaa3d" })
  const color_second_hov = new THREE.MeshPhysicalMaterial({ color: "#fbc759" })
  const color_third = new THREE.MeshPhysicalMaterial({ color: "#354ca7" })
  const color_third_hov = new THREE.MeshPhysicalMaterial({ color: "#5872dc" })
  const color_fourth= new THREE.MeshPhysicalMaterial({ color: "#9c3131" })
  const color_fourth_hov = new THREE.MeshPhysicalMaterial({ color: "#db5c5c" })

function getColor(aqi) {

  var r, g, b = 0;
  aqi = aqi * 100
  if (aqi < 50) {
      r = 255;
      g = Math.round(5.1 * aqi);
  }
  else {
      g = 255;
      r = Math.round(510 - 5.10 * aqi);
  }
  var h = r * 0x10000 + g * 0x100 + b * 0x1;
  return '#' + ('000000' + h.toString(16)).slice(-6);
}
  const opacity = 0.5
  const tools = [{
    tool_name: 'Urban Data Narrator',
    tool_category: 'Web Tool',
    link: '',
    description: '',
    development_date: '',
    status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  },
  {tool_name: 'Stadträumliche Barrierien',
  tool_category: 'Data',
  link: '',
  description: '',
  development_date: '',
  status: '',
  }];
  function add_cube_to_capacity(level_capacity, row_capacity, level, row, sidelength) {
    level_capacity = level_capacity + 1;
    row_capacity = row_capacity + 1;
      if (level_capacity > (sidelength ** 2)-1) {
        // Increase the level when capacity exceeds sidelength
        level_capacity = 0;
        level = level + 1;
        row_capacity = 0
        row = 0
      }
      if (row_capacity > sidelength-1) {
        // Increase the row when capacity exceeds sidelength
        row_capacity = 0;
        row = row + 1;
      }
      return [level_capacity, row_capacity, level, row];
  }

  // IMPORTANT following function is just capable for up to 52 json entries
  function generate_matrix( block_json) {
    const length = block_json.length;
    let sidelength = 0
    if (length == 1) {
      sidelength = 1
    }
    else if (1 < length && length < 9) {
      sidelength = 2
    }
    else if (8 < length && length < 26) {
      sidelength = 3
    }
    else if (25 < length && length < 53) {
      sidelength = 4
    }
    const build_matrix = []
    let blacklist = []
    if (13 < length && length < 22) {
      blacklist = [4]
    }
    else if (21 < length && length < 26) {
      blacklist = [4, 13]
    }
    else if (25 < length && length < 34) {
      blacklist = [5,6, 9, 10]
    }
    else if (33 < length && length < 36) {
      blacklist = [5,6, 9, 10, 21, 22]
    }
    else if (35 < length && length < 46) {
      blacklist = [5,6, 9, 10, 21, 22, 25, 26]
    }
    else if (45 < length && length < 48) {
      blacklist = [5,6, 9, 10, 21, 22, 25, 26, 37, 38]
    }
    else if (47 < length && length < 53) {
      blacklist = [5,6, 9, 10, 21, 22, 25, 26, 37, 38, 41, 42]
    }
    //else if (22 < length < 27) {
    //  blacklist = [4, 13]
    //}

    let level_capacity = 0;
    let row_capacity = 0;
    let level = 0;
    let row = 0;
    const run_length = length + blacklist.length
    console.log(run_length)
    for (let i = 0; i < run_length; i++) {
      if (!build_matrix[level]) {
        // Create a new sub-array for the current level if it doesn't exist
        build_matrix[level] = [];
      }
  
      if (!build_matrix[level][row]) {
        // Create a new sub-array for the current row if it doesn't exist
        build_matrix[level][row] = [];
      }
      console.log(sidelength, i)
      if (blacklist.includes(i) == true) {
        build_matrix[level][row].push(150);
        [level_capacity, row_capacity, level, row] = add_cube_to_capacity(level_capacity, row_capacity, level, row, sidelength)
        if (!build_matrix[level]) {
          // Create a new sub-array for the current level if it doesn't exist
          build_matrix[level] = [];
        }
        if (!build_matrix[level][row]) {
          // Create a new sub-array for the current row if it doesn't exist
          build_matrix[level][row] = [];
        }
      }
      else {
        build_matrix[level][row].push(1);
      [level_capacity, row_capacity, level, row] = add_cube_to_capacity(level_capacity, row_capacity, level, row, sidelength)
      }
      
      
      
      // Push the value into the current level and row of the build_matrix
      
    }
  
    return build_matrix;
  }
  
  const matrix = generate_matrix(tools.slice(0,48))
  console.log(matrix)

  //Dialogue management
  function handleClickOpen(data) {
    console.log(data)
  };


  function SelectToZoom({ children }) {
    const api = useBounds()
    return (
      <group onClick={(e) => (e.stopPropagation(), e.delta <= 2 && api.refresh(e.object).fit())} onPointerMissed={(e) => e.button === 0 && api.refresh().fit()}>
        {children}
      </group>
    )
  }

  return (
    matrix.map((x, i) => {
      return (
          x.map((y, j) => {
              return (
                  y.map((z, k) => {
                      return (
                          <mesh onClick={(event) => handleClickOpen(y)}>
                            <RoundedBox key={i + "," + j + "," + k} radius={0.05} smoothness={4} scale={25} position={[-65 + 25.5 * j, -70 + 25.5 * i, -65 + 25.5 * k]}>
                                <meshPhongMaterial color={getColor(z)} transparent opacity={100}  />
                            </RoundedBox>
                          </mesh>
                      )
                  }))
          }))
// TODO statt 1 JSON übergeben, dann z = JSON, Farbe abhängig von Kategorie, JSON an click Funktion übergeben

  })

  )
}

useGLTF.preload('/models/cut_model.gltf')

